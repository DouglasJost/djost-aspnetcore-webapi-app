// <auto-generated />
using System;
using AppDomainEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppDomainEntityFramework.Migrations
{
    [DbContext(typeof(MusicCollectionDbContext))]
    [Migration("20241215224102_AddGetArtistsByBandIdStoredProcedure")]
    partial class AddGetArtistsByBandIdStoredProcedure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppDomainEntities.Entities.Album", b =>
                {
                    b.Property<Guid>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlaybackFormat")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasComment("e.g., Vinyl, CD, Digital ");

                    b.Property<string>("RecordingLabel")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BandId");

                    b.HasIndex("GenreId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Artist", b =>
                {
                    b.Property<Guid>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("Deathdate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Instrument")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Band", b =>
                {
                    b.Property<Guid>("BandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateOnly?>("DisbandDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("FormationDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("BandId");

                    b.ToTable("Band");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.BandMembership", b =>
                {
                    b.Property<Guid>("BandMembershipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("BandMembershipId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("BandId");

                    b.ToTable("BandMembership");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Genre", b =>
                {
                    b.Property<Guid>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("GenreId");

                    b.HasIndex(new[] { "Name" }, "IX_Name_Unique")
                        .IsUnique();

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Song", b =>
                {
                    b.Property<Guid>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AlbumId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Credits")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<TimeOnly?>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TrackNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasComment("Order of the song in the album");

                    b.HasKey("SongId")
                        .HasName("Unique_AlbumId_TrackNumber");

                    b.HasIndex("AlbumId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.SongWriter", b =>
                {
                    b.Property<Guid>("SongWriterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SongId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SongWriterId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId");

                    b.ToTable("SongWriter");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("UserDefined")
                        .HasColumnType("bit");

                    b.HasKey("UserAccountId")
                        .HasName("PK_User");

                    b.ToTable("UserAccount");

                    b.HasData(
                        new
                        {
                            UserAccountId = new Guid("4ec76740-6895-40f4-abb8-3fbab440fff1"),
                            FirstName = "JWT",
                            Inactive = false,
                            LastModifiedDate = new DateTime(2024, 12, 15, 22, 41, 2, 422, DateTimeKind.Utc).AddTicks(7772),
                            LastName = "Issuer",
                            UserDefined = true
                        });
                });

            modelBuilder.Entity("AppDomainEntities.Entities.UserLogin", b =>
                {
                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getutcdate())");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("UserDefined")
                        .HasColumnType("bit");

                    b.HasKey("UserAccountId");

                    b.HasIndex(new[] { "Login" }, "FK_UserLogin");

                    b.ToTable("UserLogin");

                    b.HasData(
                        new
                        {
                            UserAccountId = new Guid("4ec76740-6895-40f4-abb8-3fbab440fff1"),
                            Inactive = false,
                            LastModifiedDate = new DateTime(2024, 12, 15, 22, 41, 2, 422, DateTimeKind.Utc).AddTicks(7952),
                            Login = "JwtIssuer",
                            Password = "mVwmDVr8OwTwnbVwDvi40w==.DWy8ko+AwMzcA/yu2uGVVCiMM2dGdXkWmkn0FGZvkxk=",
                            UserDefined = true
                        });
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Album", b =>
                {
                    b.HasOne("AppDomainEntities.Entities.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_Album_Artist");

                    b.HasOne("AppDomainEntities.Entities.Band", "Band")
                        .WithMany("Albums")
                        .HasForeignKey("BandId")
                        .HasConstraintName("FK_Album_Band");

                    b.HasOne("AppDomainEntities.Entities.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_Album_Genre");

                    b.Navigation("Artist");

                    b.Navigation("Band");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.BandMembership", b =>
                {
                    b.HasOne("AppDomainEntities.Entities.Artist", "Artist")
                        .WithMany("BandMemberships")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_BandMembership_Artist");

                    b.HasOne("AppDomainEntities.Entities.Band", "Band")
                        .WithMany("BandMemberships")
                        .HasForeignKey("BandId")
                        .IsRequired()
                        .HasConstraintName("FK_BandMembership_Band");

                    b.Navigation("Artist");

                    b.Navigation("Band");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Song", b =>
                {
                    b.HasOne("AppDomainEntities.Entities.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .IsRequired()
                        .HasConstraintName("FK_Song_Album");

                    b.Navigation("Album");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.SongWriter", b =>
                {
                    b.HasOne("AppDomainEntities.Entities.Artist", "Artist")
                        .WithMany("SongWriters")
                        .HasForeignKey("ArtistId")
                        .IsRequired()
                        .HasConstraintName("FK_SongWriter_Artist");

                    b.HasOne("AppDomainEntities.Entities.Song", "Song")
                        .WithMany("SongWriters")
                        .HasForeignKey("SongId")
                        .IsRequired()
                        .HasConstraintName("FK_SongWriter_Song");

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.UserLogin", b =>
                {
                    b.HasOne("AppDomainEntities.Entities.UserAccount", "UserAccount")
                        .WithOne("UserLogin")
                        .HasForeignKey("AppDomainEntities.Entities.UserLogin", "UserAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_UserLogin_User");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("BandMemberships");

                    b.Navigation("SongWriters");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Band", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("BandMemberships");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Genre", b =>
                {
                    b.Navigation("Albums");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.Song", b =>
                {
                    b.Navigation("SongWriters");
                });

            modelBuilder.Entity("AppDomainEntities.Entities.UserAccount", b =>
                {
                    b.Navigation("UserLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
